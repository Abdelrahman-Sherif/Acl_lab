require('dotenv').config()

let User = require('../models/user');
const bcrypt = require('bcrypt');
const express = require('express')
const jwt = require('jsonwebtoken')
const app = express()
app.use(express.json())

let refreshTokens = []

app.post('/token', (req, res) => {
  const refreshToken = req.body.token
  if (refreshToken == null) return res.sendStatus(401)
  if (!refreshTokens.includes(refreshToken)) return res.sendStatus(403)
  jwt.verify(refreshToken, process.env.REFRESH_TOKEN_SECRET, (err, user) => {
    if (err) return res.sendStatus(403)
    const accessToken = generateAccessToken({ email: user.email })
    res.json({ accessToken: accessToken })
  })
}
)

function generateAccessToken(user) {
    return jwt.sign(user, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '15s' })
  }
  

app.delete('/logout', (req, res) => {
  refreshTokens = refreshTokens.filter(token => token !== req.body.token)
  res.sendStatus(204)
})



app.post('/login', async (req, res) => {
    await User.findOne({username: req.body.username}).then((user)=>{ 

    if (user){
        //check if user exists 
    bcrypt.compare(req.body.password, user.password).then( (passwordMatch)=>{
            if(passwordMatch){
        
         //Assign a token to my user 
        const username = req.body.username
        const currUser = { username: username }

        const accessToken = generateAccessToken(currUser)
        const refreshToken = jwt.sign(currUser, process.env.REFRESH_TOKEN_SECRET)
        refreshTokens.push(refreshToken)
        res.json({ accessToken: accessToken, refreshToken: refreshToken })

            }
            else {
              res.status(405).json("Wrong password");
            }
        }
        )
    }
    else {res.status(404).json("User doesnt exist, pleease register first");}
    }
    )
    })


    app.post('/changePassword/:id', async (req, res) => {
      const newhashedPassword = await bcrypt.hash(req.body.newpass, 10)

      await User.findById(req.params.id).then((user)=>{ 
     //check password match
      bcrypt.compare(req.body.password, user.password).then( (passwordMatch)=>{
         // update with new password 
        if(passwordMatch){
          if(req.body.newpass===req.body.password){
            res.status(405).json("You're using the old password again");
          } 
          else{
            User.findByIdAndUpdate({ _id: req.params.id },  {password: newhashedPassword})
              .then(()=> {res.status(200).json("Updated Password successfully");})
               }}
                 else {
                res.status(405).json("The old password is wrong");
              }
          }
          )}
      
      )
      })


module.exports = app;
    




